package erp.infra.field;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.DateFormatSymbols;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.KeyStroke;
import javax.swing.border.Border;

/**
 * DatePicker class.
 * 
 * @author Leonardo Ono (ono.leo@gmail.com)
 * @since 1.00.00 (31/01/2013 10:58)
 */
public class DatePicker extends javax.swing.JPanel implements ActionListener {
    
    private Model model = new Model();
    private JButton[][] dayButtons = new JButton[7][7];
    
    // Provisory selection
    private Point provSel;
    
    private Color originalBackground;
    
    
    public DatePicker() {
        initComponents();
        createDayButtons();
        originalBackground = dayButtons[0][0].getBackground();
        registerAllKeyboardActions();
        updateView();
    }

    private void registerAllKeyboardActions() {
        registerKeyboardAction(new UpKeyAction()
                , KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0)
                , JComponent.WHEN_FOCUSED); 
        
        registerKeyboardAction(new DownKeyAction()
                , KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0)
                , JComponent.WHEN_FOCUSED); 
        
        registerKeyboardAction(new LeftKeyAction()
                , KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0)
                , JComponent.WHEN_FOCUSED); 
        
        registerKeyboardAction(new RightKeyAction()
                , KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0)
                , JComponent.WHEN_FOCUSED); 
        
        registerKeyboardAction(new SelectionKeyAction()
                , KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0)
                , JComponent.WHEN_FOCUSED); 
        
        registerKeyboardAction(new PageUpKeyAction()
                , KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, 0)
                , JComponent.WHEN_FOCUSED); 
        
        registerKeyboardAction(new PageDownKeyAction()
                , KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, 0)
                , JComponent.WHEN_FOCUSED); 
    }
    
    private void createDayButtons() {
        for (int y=0; y<7; y++) {
            for (int x=0; x<7; x++) {
                JButton button = new JButton("") {
                    JLabel label = new JLabel();
                    
                    @Override
                    protected void paintComponent(Graphics g) {
                        label.setText(getText());
                        label.setBounds(0, 0, getWidth(), getHeight());
                        label.setHorizontalAlignment(CENTER);
                        label.setForeground(getForeground());
                        label.setBackground(getBackground());
                        
                        g.setColor(getBackground());
                        g.fillRect(0, 0, getWidth(), getHeight());
                        label.paint(g);
                    }
                };
                Cursor handCursor
                        = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
                
                button.setCursor(handCursor);
                button.setOpaque(true);
                button.setFocusable(false);
                dayButtons[x][y] = button;
                panel.add(button);
                panel.putClientProperty(button, x + "," + y);
                button.addActionListener(this);
            }
        }
    }

    public void setDate(Date date) {
        model.setSelectedDate(date);
    }
    
    public Date getDate() {
        return model.getSelectedDate();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonNextMonth = new javax.swing.JButton();
        buttonPreviousMonth = new javax.swing.JButton();
        labelMonthYear = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(0, 20));
        jPanel1.setLayout(new java.awt.BorderLayout());

        buttonNextMonth.setText(">");
        buttonNextMonth.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonNextMonth.setFocusable(false);
        buttonNextMonth.setMaximumSize(new java.awt.Dimension(30, 23));
        buttonNextMonth.setMinimumSize(new java.awt.Dimension(30, 23));
        buttonNextMonth.setPreferredSize(new java.awt.Dimension(30, 23));
        buttonNextMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextMonthActionPerformed(evt);
            }
        });
        jPanel1.add(buttonNextMonth, java.awt.BorderLayout.LINE_END);

        buttonPreviousMonth.setText("<");
        buttonPreviousMonth.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonPreviousMonth.setFocusable(false);
        buttonPreviousMonth.setMaximumSize(new java.awt.Dimension(30, 23));
        buttonPreviousMonth.setMinimumSize(new java.awt.Dimension(30, 23));
        buttonPreviousMonth.setPreferredSize(new java.awt.Dimension(30, 23));
        buttonPreviousMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviousMonthActionPerformed(evt);
            }
        });
        jPanel1.add(buttonPreviousMonth, java.awt.BorderLayout.LINE_START);

        labelMonthYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMonthYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMonthYear.setText("Month 9999");
        labelMonthYear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        labelMonthYear.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel1.add(labelMonthYear, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        panel.setLayout(new java.awt.GridLayout(7, 7));
        add(panel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNextMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextMonthActionPerformed
        model.nextMonth();
    }//GEN-LAST:event_buttonNextMonthActionPerformed

    private void buttonPreviousMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviousMonthActionPerformed
        model.previousMonth();
    }//GEN-LAST:event_buttonPreviousMonthActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonNextMonth;
    private javax.swing.JButton buttonPreviousMonth;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelMonthYear;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    public class Model {
        
        private Date date = new Date();
        private Date selectedDate = date;
        private Calendar calendar = Calendar.getInstance();
        private DateFormatSymbols dfs = new DateFormatSymbols();

        public Model() {
            Point newProvSel = getSelectedCell();
            if (newProvSel != null) {
                provSel = newProvSel;
            }
        }

        public Date getSelectedDate() {
            return selectedDate;
        }

        public void setSelectedDate(Date selectedDate) {
            this.selectedDate = selectedDate;
            if (selectedDate != null) {
                setDate(selectedDate);
            }
            if (listener != null) {
                listener.dateChanged();
            }
            Point newProvSel = getSelectedCell();
            if (newProvSel != null) {
                provSel = newProvSel;
            }
            updateView();
        }
        
        private void setDate(Date date) {
            if (date != null) {
                this.date = date;
            }
            updateView();
        }
        
        public String getMonthYearLabel() {
            calendar.setTime(date);
            String monthName = calendar.getDisplayName(
                    Calendar.MONTH, Calendar.LONG, Locale.getDefault());
            
            String year = calendar.get(Calendar.YEAR) + "";
            String dateLabel = monthName + " " + year;
            return dateLabel;
        }

        public String getCellLabel(int x, int y) {
            if (y == 0) {
                return dfs.getShortWeekdays()[x + 1];
            }
            calendar.setTime(getCellDate(x, y));
            String cellLabel = calendar.get(Calendar.DAY_OF_MONTH) + "";
            return cellLabel;
        }

        public Date getCellDate(int x, int y) {
            if (y == 0) {
                return null;
            }
            Date cellDate = getFirstDayOfTable();
            calendar.setTime(cellDate);
            calendar.add(Calendar.DAY_OF_MONTH, ((y-1) * 7) + x);
            cellDate = calendar.getTime();
            return cellDate;
        }
        
        public boolean belongsToSameMonth(int x, int y) {
            calendar.setTime(date);
            int month1 = calendar.get(Calendar.MONTH);
            calendar.setTime(getCellDate(x, y));
            int month2 = calendar.get(Calendar.MONTH);
            return (month1 == month2);
        }

        public boolean isSelectedDate(int x, int y) {
            if (selectedDate == null) {
                return false;
            }
            return selectedDate.equals(getCellDate(x, y));
        }
        
        public final Point getSelectedCell() {
            Point selectedCell = new Point();
            for (int y=0; y<7; y++) {
                for (int x=0; x<7; x++) {
                    if (isSelectedDate(x, y)) {
                        selectedCell.setLocation(x, y);
                        return selectedCell;
                    }
                }
            }
            return null;
        }
        
        public void nextMonth() {
            calendar.setTime(date);
            calendar.add(Calendar.MONTH, 1);
            setDate(calendar.getTime());
        }
        
        public void previousMonth() {
            calendar.setTime(date);
            calendar.add(Calendar.MONTH, -1);
            setDate(calendar.getTime());
        }
        
        private Date getFirstDayOfTable() {
            calendar.setTime(date);
            calendar.set(Calendar.DAY_OF_MONTH, 1);
            calendar.add(Calendar.DAY_OF_MONTH, 1
                    - calendar.get(Calendar.DAY_OF_WEEK));
            
            return calendar.getTime();
        }
        
    }
    
    private Border nonSelectedBorder = BorderFactory.createEmptyBorder();
    private Border selectedBorder 
            = BorderFactory.createLineBorder(Color.BLACK, 2);
    
    public final void updateView() {
        labelMonthYear.setText(model.getMonthYearLabel());
        for (int x=0; x<7; x++) {
            for (int y=0; y<7; y++) {
                JButton button = dayButtons[x][y];
                button.setText(model.getCellLabel(x, y));
                if (y == 0) {
                    button.setForeground(Color.BLUE);
                }
                else if (y > 0 && model.belongsToSameMonth(x, y)) {
                    button.setForeground(Color.BLACK);
                }
                else {
                    button.setForeground(Color.GRAY);
                }
                if (model.isSelectedDate(x, y)) {
                    button.setBorder(selectedBorder);
                }
                else {
                    button.setBorder(nonSelectedBorder);
                }
                // Provisory selection
                if (x == provSel.x && y == provSel.y) {
                    button.setBackground(Color.WHITE);
                }
                else {
                    button.setBackground(originalBackground);
                }
            }
        }
    }
    
    // --- ActionListener implementation ---
    
    @Override
    public void actionPerformed(ActionEvent e) {
        String colRow = panel.getClientProperty(e.getSource()).toString();
        int col = Integer.parseInt(colRow.split(",")[0]);
        int row = Integer.parseInt(colRow.split(",")[1]);
        model.setSelectedDate(model.getCellDate(col, row));
        requestFocus();
    }

    // --- ModelListener ---
    
    private ModelListener listener;
    
    public static interface ModelListener {
        void dateChanged();
    }

    public ModelListener getListener() {
        return listener;
    }

    public void setListener(ModelListener listener) {
        this.listener = listener;
    }
    
    // --- Allow user to select date through keyboard ---
    
    private class UpKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            provSel.y --;
            if (provSel.y < 1) {
                provSel.y = 1;
            }
            updateView();
        }
    }
    
    private class DownKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            provSel.y++;
            if (provSel.y > 6) {
                provSel.y = 6;
            }
            updateView();
        }
    }
    
    private class LeftKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            provSel.x--;
            if (provSel.x < 0) {
                provSel.x = 6;
                model.previousMonth();
            }
            updateView();
        }
    }
    
    private class RightKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            provSel.x++;
            if (provSel.x > 6) {
                provSel.x = 0;
                model.nextMonth();
            }
            updateView();
        }
    }

    private class SelectionKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            model.setSelectedDate(model.getCellDate(provSel.x, provSel.y));
        }
    }

    private class PageUpKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            model.nextMonth();
        }
    }

    private class PageDownKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            model.previousMonth();
        }
    }
    
}
