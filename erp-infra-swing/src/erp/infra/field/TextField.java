package erp.infra.field;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * TextField class.
 * 
 * @author Leonardo Ono (ono.leo@gmail.com)
 * @since 1.00.00 (30/01/2013 09:18)
 */
public class TextField extends Field implements FocusListener {

    private Map<Class, TypeConfig> typeConfigs = new HashMap<Class, TypeConfig>();
    
    // --- TextField specific properties ---

    private String regex = "";
    private boolean selectAllOnFocus = true;

    public TextField() {
        initComponents();
        text.addFocusListener(this);
        component = text;
        
        // Set acceptable types for this field
        new TextTypeConfig();
        new CharacterTypeConfig();
        new BooleanTypeConfig();
        new NumericTypeConfig();
        new DateTypeConfig();
    }
    
    @Override
    public boolean isAcceptableType(Class type) {
        return typeConfigs.containsKey(type);
    }
    
    @Override
    public Set<Class> acceptableTypes() {
        return typeConfigs.keySet();
    }
    
    /**
     * Inicia as configuracoes padroes para cada tipo aceitavel.
     */
    @Override
    public void init(Class type) {
        TypeConfig typeConfig = typeConfigs.get(type);
        if (typeConfig == null) {
            throw new UnsupportedOperationException("Type " 
                    + type.getName() + " not supported !");
        }
        typeConfig.config();
    }
    
    @Override
    public void setEditable(boolean editable) {
        text.setEditable(editable);
    }
    
    @Override
    public boolean isEditable() {
        return text.isEditable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text = new erp.infra.field.RegexText();

        setLayout(new java.awt.BorderLayout());
        add(text, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private erp.infra.field.RegexText text;
    // End of variables declaration//GEN-END:variables

    // --- TextField specific properties ---
    
    public void setFieldText(String fieldText) {
        this.text.setText(fieldText);
    }
    
    public String getFieldText() {
        return text.getText();
    }

    public boolean isSelectAllOnFocus() {
        return selectAllOnFocus;
    }

    public void setSelectAllOnFocus(boolean selectAllOnFocus) {
        this.selectAllOnFocus = selectAllOnFocus;
    }
    
    // --- FocusListener implementation ---

    @Override
    public void focusGained(FocusEvent e) {
        if (selectAllOnFocus) {
            text.selectAll();
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
    }

    // --- Default type configs ---
    
    private abstract class TypeConfig {
        abstract void config();
    }
    
    private class TextTypeConfig extends TypeConfig {
        TextTypeConfig() {
            setTypeConfig();
        }
        
        private void setTypeConfig() {
            typeConfigs.put(String.class, this);
        }
        
        @Override
        public void config() {
            text.setRegex(".*");
        }
    }

    private class CharacterTypeConfig extends TypeConfig {
        CharacterTypeConfig() {
            setAllTypeConfigs();
        }
        
        private void setAllTypeConfigs() {
            typeConfigs.put(Character.class, this);
            typeConfigs.put(char.class, this);
        }
        
        @Override
        public void config() {
            text.setRegex(".{1}");
        }
    }
    
    private class BooleanTypeConfig extends TypeConfig {
        BooleanTypeConfig() {
            setAllTypeConfigs();
        }
        
        private void setAllTypeConfigs() {
            typeConfigs.put(Boolean.class, this);
            typeConfigs.put(boolean.class, this);
        }
        
        @Override
        public void config() {
            // TODO internationalization
            text.setRegex("SIM|NAO");
        }
    }
    
    private class NumericTypeConfig extends TypeConfig {
        NumericTypeConfig() {
            setAllTypeConfigs();
        }
        
        private void setAllTypeConfigs() {
            typeConfigs.put(byte.class, this);
            typeConfigs.put(Byte.class, this);
            typeConfigs.put(short.class, this);
            typeConfigs.put(Short.class, this);
            typeConfigs.put(int.class, this);
            typeConfigs.put(Integer.class, this);
            typeConfigs.put(Long.class, this);
            typeConfigs.put(long.class, this);
        }
        
        @Override
        public void config() {
            text.setRegex("[0-9]*");
        }
    }
 
    private class DateTypeConfig extends TypeConfig {
        DateTypeConfig() {
            setTypeConfig();
        }
        
        private void setTypeConfig() {
            typeConfigs.put(java.util.Date.class, this);
        }
        
        @Override
        public void config() {
            // TODO internationalization
            text.setRegex("[0-9]{2}/[0-9]{2}/[0-9]{4}");
        }
    }
    
}
