package erp.infra.field;

import erp.infra.annotation.Form;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.AbstractAction;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

/**
 * LookupField class.
 * 
 * @author Leonardo Ono (ono.leo@gmail.com)
 * @since 1.00.00 (01/02/2013 09:29)
 */
public class LookupField extends Field {

    private JPopupMenu popup = new JPopupMenu();
    private JList popupList = new JList(new PopupListModel());
    private JScrollPane popupScrollPane = new JScrollPane(popupList);
    
    private EnterKeyAction enterKeyAction = new EnterKeyAction();
    private UpKeyAction upKeyAction = new UpKeyAction();
    private DownKeyAction downKeyAction = new DownKeyAction();
    
    private Model model;
    private String labelExpression;
    private ModelListener modelListener = new ModelListenerImpl();
    
    public LookupField() {
        initComponents();
        setModel(new Model());

        popupList.addMouseListener(new ListMouseClicked());
        popupList.setBorder(null);
        popupScrollPane.setBorder(null);
        popup.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
        popup.setLayout(new BorderLayout());
        popup.add(popupScrollPane, BorderLayout.CENTER);
        popup.setPreferredSize(new Dimension(250, 150));
        popup.setFocusable(false);
        
        text.registerKeyboardAction(enterKeyAction
                , KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0)
                , JComponent.WHEN_FOCUSED); 
        
        text.registerKeyboardAction(upKeyAction
                , KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0)
                , JComponent.WHEN_FOCUSED); 
        
        text.registerKeyboardAction(downKeyAction
                , KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0)
                , JComponent.WHEN_FOCUSED); 
    }

    public Model getModel() {
        return model;
    }

    public final void setModel(Model model) {
        this.model = model;
        model.addListener(modelListener);
    }

    public String getLabelExpression() {
        return labelExpression;
    }

    public void setLabelExpression(String labelExpression) {
        this.labelExpression = labelExpression;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        text = new javax.swing.JTextField();
        panel = new javax.swing.JPanel();
        label = new javax.swing.JLabel();
        button = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        splitPane.setBorder(null);
        splitPane.setDividerLocation(100);

        text.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFocusLost(evt);
            }
        });
        text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textKeyReleased(evt);
            }
        });
        splitPane.setLeftComponent(text);

        panel.setLayout(new java.awt.BorderLayout());

        label.setText("description");
        label.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 0));
        panel.add(label, java.awt.BorderLayout.CENTER);

        button.setText("...");
        button.setFocusable(false);
        button.setPreferredSize(new java.awt.Dimension(32, 23));
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });
        panel.add(button, java.awt.BorderLayout.LINE_START);

        splitPane.setRightComponent(panel);

        add(splitPane);
    }// </editor-fold>//GEN-END:initComponents

    private void textFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFocusLost
        model.initLookup(text.getText());
        popup.setVisible(false);
    }//GEN-LAST:event_textFocusLost

    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        throw new NotImplementedException();
    }//GEN-LAST:event_buttonActionPerformed

    private void textKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textKeyReleased
        if (evt.getKeyCode() == 27) {
            popup.setVisible(false);
            return;
        }
        System.out.println("textKeyReleased " + evt.getKeyCode());
        if (!Character.isDefined(evt.getKeyChar()) 
                || evt.getKeyCode() == 10 || evt.getKeyCode() == 13) {
            
            return;
        }
        model.initUpdateList(text.getText());
    }//GEN-LAST:event_textKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button;
    private javax.swing.JLabel label;
    private javax.swing.JPanel panel;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTextField text;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isAcceptableType(Class type) {
        Form formAnnotation = (Form) type.getAnnotation(Form.class);
        return (formAnnotation != null);
    }

    @Override
    public void init(Class type) {
        if (!isAcceptableType(type)) {
            throw new RuntimeException("Class " + type.getName() 
                    + " is not a acceptable type for LookupField !");
        }
    }

    @Override
    public boolean isEditable() {
        return text.isEditable();
    }

    @Override
    public void setEditable(boolean editable) {
        text.setEditable(editable);
        button.setEnabled(editable);
    }

    @Override
    public void setValue(Object value) {
        model.setSelectedEntity(value);
    }

    @Override
    public Object getValue() {
        return model.getSelectedEntity();
    }

    public void updateView() {
        try {
            ScriptEngine se = new ScriptEngineManager().getEngineByName("JavaScript");
            se.put("entity", model.getSelectedEntity());
            System.out.println("--> " + model.getSelectedEntity());
            System.out.println("--> " + "entity." + model.getLookupProperty());
            Object ret = se.eval("entity." + model.getLookupProperty());
            if (ret == null) {
                ret = "";
            }
            text.setText(ret.toString());
            label.setText(se.eval(labelExpression).toString());
        } catch (ScriptException ex) {
            throw new RuntimeException(ex);
        }
    }
    
    public void updateList() {
        if (!popup.isVisible()) {
            popup.setFocusable(false);
            popup.show(text, 0, text.getHeight());
        }
        popupList.setSelectedIndex(0);
        popupList.repaint();
        popupList.updateUI();
        System.out.println("update list");
    }
    
    // --- Model ---
    
    public static class Model<T> {
        protected T selectedEntity;
        protected String lookupProperty;
        protected List<ModelListener> listeners 
                = new ArrayList<ModelListener>();
        protected List<T> list = new ArrayList<T>();
        
        public T getSelectedEntity() {
            return selectedEntity;
        }

        public void setSelectedEntity(T selectedEntity) {
            boolean valueChanged = (selectedEntity == null 
                    || selectedEntity != this.selectedEntity);
            
            this.selectedEntity = selectedEntity;
            if (valueChanged) {
                fireSelectedEntityChanged();
            }
        }

        public String getLookupProperty() {
            return lookupProperty;
        }

        public List<T> getList() {
            return list;
        }

        public void setList(List<T> list) {
            boolean listChanged = (list == null || !list.equals(this.list));
            System.out.println("setList listChanged " + listChanged);
            this.list = list;
            if (listChanged) {
                fireListChanged();
            }
        }

        public void setLookupProperty(String lookupProperty) {
            this.lookupProperty = lookupProperty;
        }
        
        private void initLookup(String value) {
            setSelectedEntity(lookup(value));
        }
        
        private void initUpdateList(String value) {
            setList(updateList(value));
        }
        
        public T lookup(String value) {
            // must be implemented
            return null;
        }
        
        public List<T> updateList(String value) {
            // must be implemented
            return null;
        }
        
        // --- Listener ---
        
        public void addListener(ModelListener listener) {
            listeners.add(listener);
        }
        
        public void removeListener(ModelListener listener) {
            listeners.remove(listener);
        }
        
        private void fireSelectedEntityChanged() {
            for (ModelListener listener : listeners) {
                listener.selectedEntityChanged();
            }
        }

        private void fireListChanged() {
            for (ModelListener listener : listeners) {
                listener.listChanged();
            }
        }
        
    }

    // --- ModelListener ---
    
    public static interface ModelListener {
        void selectedEntityChanged();
        void listChanged();
    }

    // --- ModelListener implementation for this view ---
    
    private class ModelListenerImpl implements ModelListener {
        @Override
        public void selectedEntityChanged() {
            updateView();
        }

        @Override
        public void listChanged() {
            updateList();
        }
    }
    
    // --- PopupListModel implementation ---
    
    private class PopupListModel extends AbstractListModel<Object> {

        @Override
        public int getSize() {
            return model.getList().size();
        }

        @Override
        public Object getElementAt(int index) {
            return model.getList().get(index);
        }
        
    }

    // --- Alow user to select list item through keyboard ---
    
    private class EnterKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (popup.isVisible()) {
                model.setSelectedEntity(popupList.getSelectedValue());
                popup.setVisible(false);
                System.out.println("model.setSelectedEntity(popupList.getSelectedValue());");
            }
            else {
                model.initLookup(text.getText());
                System.out.println("model.initLookup(text.getText());");
            }
        }
    }
    
    private class UpKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (popup.isVisible()) {
                int si = popupList.getSelectedIndex();
                popupList.setSelectedIndex(--si);
                popupList.ensureIndexIsVisible(si);
            }
        }
    }

    private class DownKeyAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            text.requestFocus();
            if (!popup.isVisible()) {
                popup.show(text, 0, text.getHeight());
                popupList.setSelectedIndex(0);
                popupList.ensureIndexIsVisible(0);
            }
            else {
                int si = popupList.getSelectedIndex();
                popupList.setSelectedIndex(++si);
                popupList.ensureIndexIsVisible(si);
            }
        }
    }
    
    // --- Allow user to select double clicking on a item ---
    
    private class ListMouseClicked extends MouseAdapter {
        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() != 2) {
                return ;
            }
            System.out.println(e);
            System.out.println("popupList.getSelectedValue()=" + popupList.getSelectedValue());
            model.setSelectedEntity(popupList.getSelectedValue());
            popup.setVisible(false);
        }
    }

}
