package erp.infra.field;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormatSymbols;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.border.Border;

/**
 * DatePicker class.
 * 
 * @author Leonardo Ono (ono.leo@gmail.com)
 * @since 1.00.00 (31/01/2013 10:58)
 */
public class DatePicker extends javax.swing.JPanel implements ActionListener {
    
    private DatePickerModel model = new DatePickerModel();
    private JButton[][] dayButtons = new JButton[7][7];
    
    public DatePicker() {
        initComponents();
        createDayButtons();
        updateView();
    }

    private void createDayButtons() {
        for (int y=0; y<7; y++) {
            for (int x=0; x<7; x++) {
                JButton button = new JButton("") {
                    JLabel label = new JLabel();
                    
                    @Override
                    protected void paintComponent(Graphics g) {
                        label.setText(getText());
                        label.setBounds(0, 0, getWidth(), getHeight());
                        label.setHorizontalAlignment(CENTER);
                        label.setForeground(getForeground());
                        label.setBackground(getBackground());
                        
                        g.setColor(getBackground());
                        g.fillRect(0, 0, getWidth(), getHeight());
                        label.paint(g);
                    }
                };
                button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                button.setOpaque(true);
                button.setFocusable(false);
                dayButtons[x][y] = button;
                panel.add(button);
                panel.putClientProperty(button, x + "," + y);
                button.addActionListener(this);
            }
        }
    }

    public void setDate(Date date) {
        model.setSelectedDate(date);
    }
    
    public Date getDate() {
        return model.getSelectedDate();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonNextMonth = new javax.swing.JButton();
        buttonPreviousMonth = new javax.swing.JButton();
        labelMonthYear = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(0, 20));
        jPanel1.setLayout(new java.awt.BorderLayout());

        buttonNextMonth.setText(">");
        buttonNextMonth.setFocusable(false);
        buttonNextMonth.setPreferredSize(new java.awt.Dimension(45, 23));
        buttonNextMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextMonthActionPerformed(evt);
            }
        });
        jPanel1.add(buttonNextMonth, java.awt.BorderLayout.LINE_END);

        buttonPreviousMonth.setText("<");
        buttonPreviousMonth.setFocusable(false);
        buttonPreviousMonth.setPreferredSize(new java.awt.Dimension(45, 23));
        buttonPreviousMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviousMonthActionPerformed(evt);
            }
        });
        jPanel1.add(buttonPreviousMonth, java.awt.BorderLayout.LINE_START);

        labelMonthYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMonthYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMonthYear.setText("Month 9999");
        labelMonthYear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        labelMonthYear.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel1.add(labelMonthYear, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        panel.setLayout(new java.awt.GridLayout(7, 7));
        add(panel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNextMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextMonthActionPerformed
        model.nextMonth();
    }//GEN-LAST:event_buttonNextMonthActionPerformed

    private void buttonPreviousMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviousMonthActionPerformed
        model.previousMonth();
    }//GEN-LAST:event_buttonPreviousMonthActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonNextMonth;
    private javax.swing.JButton buttonPreviousMonth;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelMonthYear;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    public class DatePickerModel {
        
        private Date date = new Date();
        private Date selectedDate = date;
        private Calendar calendar = Calendar.getInstance();
        private DateFormatSymbols dfs = new DateFormatSymbols();

        public Date getSelectedDate() {
            return selectedDate;
        }

        public void setSelectedDate(Date selectedDate) {
            this.selectedDate = selectedDate;
            if (selectedDate != null) {
                setDate(selectedDate);
            }
            else {
                updateView();
            }
        }
        
        private void setDate(Date date) {
            if (date != null) {
                this.date = date;
            }
            updateView();
        }
        
        public String getDateLabel() {
            calendar.setTime(date);
            String monthName = calendar.getDisplayName(
                    Calendar.MONTH, Calendar.LONG, Locale.getDefault());
            
            String year = calendar.get(Calendar.YEAR) + "";
            String dateLabel = monthName + " " + year;
            return dateLabel;
        }

        public String getCellLabel(int x, int y) {
            if (y == 0) {
                return dfs.getShortWeekdays()[x + 1];
            }
            calendar.setTime(getCellDate(x, y));
            String cellLabel = calendar.get(Calendar.DAY_OF_MONTH) + "";
            return cellLabel;
        }

        public Date getCellDate(int x, int y) {
            if (y == 0) {
                return null;
            }
            Date cellDate = getFirstDayOfTable();
            calendar.setTime(cellDate);
            calendar.add(Calendar.DAY_OF_MONTH, ((y-1) * 7) + x);
            cellDate = calendar.getTime();
            return cellDate;
        }
        
        public boolean belongsToSameMonth(int x, int y) {
            calendar.setTime(date);
            int month1 = calendar.get(Calendar.MONTH);
            calendar.setTime(getCellDate(x, y));
            int month2 = calendar.get(Calendar.MONTH);
            return (month1 == month2);
        }

        public boolean isSelectedDate(int x, int y) {
            if (selectedDate == null) {
                return false;
            }
            return selectedDate.equals(getCellDate(x, y));
        }
        
        public void nextMonth() {
            calendar.setTime(date);
            calendar.add(Calendar.MONTH, 1);
            setDate(calendar.getTime());
        }
        
        public void previousMonth() {
            calendar.setTime(date);
            calendar.add(Calendar.MONTH, -1);
            setDate(calendar.getTime());
        }
        
        private Date getFirstDayOfTable() {
            calendar.setTime(date);
            calendar.set(Calendar.DAY_OF_MONTH, 1);
            calendar.add(Calendar.DAY_OF_MONTH, 1
                    - calendar.get(Calendar.DAY_OF_WEEK));
            
            return calendar.getTime();
        }
        
    }
    
    private Border selectedBorder = BorderFactory.createLineBorder(Color.BLACK, 2);
    private Border nonSelectedBorder = BorderFactory.createEmptyBorder();
    
    public final void updateView() {
        labelMonthYear.setText(model.getDateLabel());
        for (int x=0; x<7; x++) {
            for (int y=0; y<7; y++) {
                JButton button = dayButtons[x][y];
                button.setText(model.getCellLabel(x, y));
                if (y == 0) {
                    button.setForeground(Color.BLUE);
                }
                else if (y > 0 && model.belongsToSameMonth(x, y)) {
                    button.setForeground(Color.BLACK);
                }
                else {
                    button.setForeground(Color.GRAY);
                }
                if (model.isSelectedDate(x, y)) {
                    button.setBorder(selectedBorder);
                }
                else {
                    button.setBorder(nonSelectedBorder);
                }
            }
        }
    }
    
    // --- ActionListener implementation ---
    
    @Override
    public void actionPerformed(ActionEvent e) {
        String colRow = panel.getClientProperty(e.getSource()).toString();
        int col = Integer.parseInt(colRow.split(",")[0]);
        int row = Integer.parseInt(colRow.split(",")[1]);
        model.setSelectedDate(model.getCellDate(col, row));
    }
    
    // Test
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        calendar.set(2013, 2, 10);
        Date hoje = calendar.getTime();
        System.out.println(hoje);
        
        DatePicker datePicker = new DatePicker();
        DatePickerModel model = datePicker.new DatePickerModel();
        model.setDate(hoje);
        
        System.out.println();
        System.out.println(model.getDateLabel());
        for (int y=0; y<7; y++) {
            for (int x=0; x<7; x++) {
                String label = model.getCellLabel(x, y).trim() + "     ";
                label = label.substring(0, 5);
                System.out.print(label);
            }
            System.out.println("");
        }
        
        model.nextMonth();
        System.out.println();
        System.out.println(model.getDateLabel());
        for (int y=0; y<7; y++) {
            for (int x=0; x<7; x++) {
                String label = model.getCellLabel(x, y).trim() + "     ";
                label = label.substring(0, 5);
                System.out.print(label);
            }
            System.out.println("");
        }
        
        //Calendar c = Calendar.getInstance();
        //c.setTime(hoje);
        //c.set(Calendar.DAY_OF_MONTH, 1);
        //c.add(Calendar.DAY_OF_MONTH, 1-c.get(Calendar.DAY_OF_WEEK));
        //System.out.println(c.get(Calendar.DAY_OF_WEEK) + " " + c.getTime());
    }
    
}
